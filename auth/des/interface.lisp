
;;; Autogenerated from frpc/auth/des/frpc-des.x at 2015-6-5 7:57:57 

(in-package #:frpc-des)

(defxtype* frpc-des-entry ()
  (:plist :name :string
	  :public (:varray* :octet)))

(defxtype frpc-des-entry-list ()
  ((stream)
   (read-xtype-list stream 'frpc-des-entry))
  ((stream list)
   (write-xtype-list stream 'frpc-des-entry list)))

(frpc:defprogram frpc-des-prog 814857052)

;; -----------------------------------

(frpc:defrpc call-null 0 :void :void 
  (:program frpc-des-prog 1)
  (:handler #'default-null-handler))

;; -----------------------------------

(defun handle-get (name)
  (integer-keybuf (find-public-key name)))

(frpc:defrpc call-get 1 frpc-des-name (:varray* :octet)
  (:program frpc-des-prog 1)
  (:arg-transformer (name) name)
  (:handler #'handle-get))

;; -----------------------------------

(defun auth-or-fail (name)
  ;; reject if not authenticated using DES for the name name as the person they are claiming to be
  (unless (eq (opaque-auth-flavour *rpc-remote-auth*) :auth-des)
    (error 'rpc-auth-error))
  (let ((aname (rpc-auth-principal)))
    (unless (string-equal aname name)
      (error 'rpc-auth-error))))

(defun handle-set (arg)
  (auth-or-fail (getf arg :name))
  (add-public-key (getf arg :name) (getf arg :public))
  nil)
  
(frpc:defrpc call-set 2 frpc-des-entry :void
  (:program frpc-des-prog 1)
  (:arg-transformer (name public)
    (list :name name :public (integer-keybuf public)))
  (:handler #'handle-set))

;; -----------------------------------

(defun handle-unset (name)
  (auth-or-fail name)
  (remove-public-key name)
  nil)
  
(frpc:defrpc call-unset 3 :string :void
  (:program frpc-des-prog 1)
  (:arg-transformer (name public)
    (list :name name :public (integer-keybuf public)))
  (:handler #'handle-set))

;; -----------------------------------

(defun handle-list (void)
  (declare (ignore void))
  (let ((entries (public-key-list)))
    (mapcar (lambda (entry)
	      (list :name (getf entry :name)
		    :public (getf entry :public)))
	    entries)))

(frpc:defrpc call-list 4 :void (:optional frpc-des-entry-list)
  (:program frpc-des-prog 1))
