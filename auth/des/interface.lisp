;;;; Copyright (c) Frank James 2015 <frank.a.james@gmail.com>
;;;; This code is licensed under the MIT license.

;;; Autogenerated from frpc/auth/des/frpc-des.x at 2015-6-5 7:57:57 

(in-package #:frpc-des)

;; this type just maps integers into buffer arrays for convenience
(defxtype frpc-des-keybuf ()
  ((stream)
   (let ((buff (frpc::read-octet-array stream)))
     (keybuf-integer buff)))
  ((stream integer)
   (frpc::write-octet-array stream (integer-keybuf integer))))

;; represents a database entry
(defxtype* frpc-des-entry ()
  (:plist :name :string
	  :public frpc-des-keybuf))

;; a list of database entries 
(defxtype frpc-des-entry-list ()
  ((stream)
   (read-xtype-list stream 'frpc-des-entry))
  ((stream list)
   (write-xtype-list stream 'frpc-des-entry list)))

;; a random program number I generated
(defprogram frpc-des-prog 814857052)

;; -----------------------------------

(defrpc call-null 0 :void :void 
  (:program frpc-des-prog 1)
  (:handler #'default-null-handler))

;; -----------------------------------

(defun handle-get (name)
  (or (find-public-key name) 0))

(defrpc call-get 1 :string frpc-des-keybuf 
  (:program frpc-des-prog 1)
  (:arg-transformer (name) name)
  (:documentation "Get the public key for the named principal. Returns 0 if not found.")
  (:handler #'handle-get))

;; -----------------------------------

(defun auth-or-fail (&optional name)
  ;; reject if not authenticated using DES for the same name as the person they are claiming to be
  (unless (eq (opaque-auth-flavour *rpc-remote-auth*) :auth-des)
    (frpc-log :trace "Not DES authenticated")
    (error 'rpc-auth-error))
  (when name 
    (let ((aname (rpc-auth-principal)))
      (unless (string-equal aname name)
	(frpc-log :trace "Auth name ~A doesn't match requested name ~A" aname name)
	(error 'rpc-auth-error)))))
  
(defun handle-set (arg)
  ;; the commented version below allows any user to create, but only the specified user to modify 
  ;; (auth-or-fail)
  ;; (add-public-key (getf arg :name) (getf arg :public) 
  ;; 		  ;; only allow modifications if already authenticated as this user
  ;; 		  (string-equal (getf arg :name) (rpc-auth-principal)))

  ;; this version only allows the specified user to modify 
  (auth-or-fail (getf arg :name))
  (add-public-key (getf arg :name) (getf arg :public))
  nil)
  
(defrpc call-set 2 frpc-des-entry :void
  (:program frpc-des-prog 1)
  (:arg-transformer (name public)
    (list :name name :public public))
  (:documentation "Set the public key for the principal named NAME. PUBLIC should be the public key to set.")
  (:handler #'handle-set))

;; -----------------------------------

(defun handle-unset (name)
  (auth-or-fail name)
  (remove-public-key name)
  nil)
  
(defrpc call-unset 3 :string :void
  (:program frpc-des-prog 1)
  (:arg-transformer (name public)
    (list :name name :public public))
  (:documentation "Delete the public key entry for the named principal.")
  (:handler #'handle-set))

;; -----------------------------------

(defun handle-list (void)
  (declare (ignore void))
  (public-key-list))

;; NOTE: if the database happens to be very large then it's possible there won't be enough space
;; to return them all. If there is a call for it, a future version should offer some sort of tag 
;; so that the client can continue reading from where the first call finished. 

(defrpc call-list 4 
  :void 
  (:optional frpc-des-entry-list)
  (:program frpc-des-prog 1)
  (:documentation "List all database entries.")
  (:handler #'handle-list))
