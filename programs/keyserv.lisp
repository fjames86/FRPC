;;;; Copyright (c) Frank James 2015 <frank.a.james@gmail.com>
;;;; This code is licensed under the MIT license.

;;; Autogenerated from frpc/gen/xfiles/key_prot.x at 2015-6-2 16:41:16 

;;;
;;; This file defines a keyserver (as defined in key_prot.x) to distribute secret/public keys for use with 
;;; AUTH-DES authentication flavour. 
;;; 

(defpackage #:keyserv
  (:use #:cl #:frpc)
  (:export #:call-null
           #:call-set
           #:call-encrypt
           #:call-decrypt
           #:call-gen
           #:call-get))

(in-package #:keyserv)


(defxenum keystatus 
  (:success 0) 
  (:nosecret 1) 
  (:unknown 2)
  (:error 3))

(define-condition key-error (error)
  ((stat :initarg :stat :reader key-error-stat))
  (:report (lambda (c stream)
             (format stream "KEY-ERROR: ~A" (key-error-stat c)))))

(defconstant +hex-key-bytes+ 48)

(defxtype* des-block () (:array :octet 8))
(defxtype* keybuf () (:varray* :octet +hex-key-bytes+))
(defxtype* netnamestr () :string)

(defxtype* cryptkeyarg () 
  (:list netnamestr des-block)) ;; remotename deskey

(defxunion cryptkeyres (keystatus) 
  (:success des-block)
  (otherwise :void))

(defconstant +max-gids+ 16)

(defxtype* unixcred ()
  (:plist :uid :uint32
          :gid :uint32 
          :gids (:varray :uint32 +max-gids+)))

(defxunion getcredres (keystatus) 
  (:success unixcred)
  (otherwise :void))

(defprogram key-prog 100029)

;; ------------------------------

(defrpc call-null 0 :void :void
  (:program key-prog 1))

;; ---------------------------------

(defrpc call-set 1 keybuf keystatus 
  (:program key-prog 1)
  (:arg-transformer (key) key)
  (:transformer (res)
    (if (eq res :success) 
        nil
        (error 'key-error :stat res)))
  (:documentation "This is my secret key, store it for me."))

;; ---------------------------------

(defrpc call-encrypt 2 cryptkeyarg cryptkeyres 
  (:program key-prog 1)
  (:arg-transformer (netname key)
    (list netname key))
  (:transformer (res)
    (if (eq (xunion-tag res) :success)
        (xunion-val res)
        (error 'key-error :stat (xunion-tag res))))
  (:documentation "I want to talk to X, encrypt a conversation key for me."))

;; ---------------------------------

(defrpc call-decrypt 3 cryptkeyarg cryptkeyres 
  (:program key-prog 1)
  (:arg-transformer (netname key)
    (list netname key))
  (:transformer (res)
    (if (eq (xunion-tag res) :success)
        (xunion-val res)
        (error 'key-error :stat (xunion-tag res))))
  (:documentation "X just sent me a message, decrypt the conversation key for me."))

;; ---------------------------------

(defrpc call-gen 4 :void des-block 
  (:program key-prog 1)
  (:documentation "Generate a conversation key for me."))

;; ---------------------------------
    
(defrpc call-get 5 netnamestr getcredres 
  (:program key-prog 1)
  (:arg-transformer (netname) netname)
  (:transformer (res)
    (if (eq (xunion-tag res) :success)
        (xunion-val res)
        (error 'key-error (xunion-tag res))))
  (:documentation "Get the UID, GID and GID-list for this netname."))

;; ----------------------------------------------
;; ----------------------------------------------

;; version 2

;;(defxtype* cryptkeyarg2 ()
;;  (:plist remotename netnamestr 
;;          remotekey netobj 
;;          deskey des-block))

;; (defxtype* key-netstarg ()
;;   (:plist st-priv-key keybuf 
;;           st-pub-key keybuf 
;;           st-netname netnamestr))

;; (defxunion key-netstres (keystatus) 
;;   (:key-success key-netstarg)
;;   (otherwise :void))



;; (defrpc call-null2 0 :void :void
;;   (:program key-prog 2))

;; (defrpc call-key-set 1 keybuf keystatus (:program key-prog 2))

;; (defrpc call-key-encrypt 2 cryptkeyarg cryptkeyres (:program key-prog 2))

;; (defrpc call-key-decrypt 3 cryptkeyarg cryptkeyres (:program key-prog 2))

;; (defrpc call-key-gen 4 :void des-block (:program key-prog 2))

;; (defrpc call-key-getcred 5 netnamestr getcredres (:program key-prog 2))

;; (defrpc call-key-encrypt-pk 6 cryptkeyarg2 cryptkeyres
;;              (:program key-prog 2))

;; (defrpc call-key-decrypt-pk 7 cryptkeyarg2 cryptkeyres
;;              (:program key-prog 2))

;; (defrpc call-key-net-put 8 key-netstarg keystatus (:program key-prog 2))

;; (defrpc call-key-net-get 9 :void key-netstres (:program key-prog 2))

;; (defrpc call-key-get-conv 10 keybuf cryptkeyres (:program key-prog 2))
